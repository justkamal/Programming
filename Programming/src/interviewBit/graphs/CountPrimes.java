package interviewBit.graphs;

import java.util.ArrayList;
import java.util.Arrays;

public class CountPrimes {

	boolean isPrime[] = new boolean[1000001];
	
	public void sieve(boolean isPrime[]) {
		Arrays.fill(isPrime, true);
		isPrime[1] = false;
		
		for (int i = 2; i * i < isPrime.length; ++i) {
			if (isPrime[i]) {
				for (int j = i * i; j < isPrime.length; j += i) {
					isPrime[j] = false;
				}
			}
		}
	}

	public int check(int x, int y) {
		if (isPrime[x] && !isPrime[y])
			return -1;
		else if (!isPrime[x] && isPrime[y])
			return 1;
		return 0;
	}

	public void updateQuery(int[] tree, int index, int update, int root, int start, int end) {
		if (start == end) {
	        tree[root] += update;
	    } else {
	        int mid = (start + end) / 2;
	        if (index <= mid)
	            updateQuery(tree, index, update, root*2 + 1, start, mid);
	        else
	            updateQuery(tree, index, update, root*2 + 2, mid+1, end);
	        tree[root] = tree[root*2 + 1] + tree[root*2+2];
	    }
	}

	public int rangeQuery(int[] tree, int root, int L, int R, int start, int end) {
		if(root > tree.length)
			return 0;
	    if (L == start && R == end) {
	        return tree[root];
	    }
	    int mid = (start + end) / 2;
	    
	    return rangeQuery(tree, 2*root + 1, L, Math.min(R, mid), start, mid) + rangeQuery(tree, root * 2 + 2, Math.max(L, mid + 1), R, mid + 1, end);
	}

	public void buildSegmentTree(int[] tree, int[] A, int root, int start, int end) {
		if (start == end) {
	        tree[root] = isPrime[A[start]] ? 1 : 0;
	    } else {
	        int mid = (start + end) / 2;
	        buildSegmentTree(tree, A, root*2 + 1, start, mid);
	        buildSegmentTree(tree, A, root*2 + 2, mid+1, end);
	        tree[root] = tree[root * 2 + 1] + tree[root * 2 + 2];
	    }
	}

	public int[] solve(int[] A, String[] B, int[] C, int[] D) {
		sieve(isPrime);

		int[] tree = new int[4*A.length + 1];
		buildSegmentTree(tree, A, 0, 0, A.length - 1);

		ArrayList<Integer> res = new ArrayList<Integer>();

		for (int i = 0; i < B.length; ++i) {
			switch (B[i]) {
			case "A":
				int ans = 0;
				if(C[i]-1 == D[i]-1)
					ans = isPrime[A[C[i]-1]] ? 1 : 0;  
				else
					ans = rangeQuery(tree, 0, C[i] - 1, D[i] - 1, 0, A.length - 1);
				res.add(ans);
				break;
			case "C":
				int update = check(A[C[i] - 1], D[i]);
				A[C[i] - 1] = D[i];
				if (update != 0)
					updateQuery(tree, C[i] - 1, update, 0, 0, A.length - 1);
				break;
			}
		}

		int[] ans = new int[res.size()];
		for(int i = 0; i < res.size(); ++i)
			ans[i] = res.get(i);
		
		return ans;
	}

	public static void main(String[] args) {
		CountPrimes obj = new CountPrimes();
		int[] A = { 2, 138157, 930887, 351863, 636916, 78157, 238336, 885387, 566011, 516650, 40343, 202363, 490028, 442699, 520060, 285281, 513927, 247381, 383427, 89173, 950501, 5212, 674693, 702568, 956430, 266549, 21531, 678767, 665124, 174068, 883409, 513930, 722341, 634023, 562459, 133070, 898168, 26399, 175012, 142787, 176230, 377374, 102551, 544920, 669679, 898538, 575199, 966547, 798316, 900551, 566414, 215329, 776092, 268981, 220663, 241874, 517547, 999171, 906997, 101641, 702306, 794207, 477085, 336328, 193147, 126506, 577193, 621730, 491171, 925858, 616125, 572807, 100546, 296669, 233368, 515435, 185309, 344044, 755057, 171088, 426809, 11213, 947179, 574309, 393585, 915911, 502652, 392755, 318323, 999933, 503147, 549677, 993369, 96461, 210013, 82067, 698587, 348095, 597049, 140796, 329677, 651435, 90067, 97468, 66602, 130171, 612903, 379007, 570493, 926653, 152641, 997302, 613861, 724287, 209442, 710051, 429690, 968251, 346620, 441877, 744730, 958032, 424273, 738098, 53231, 834482, 890676, 588257, 698928, 365257, 179498, 872354, 950227, 276966, 614153, 964684, 333713, 28625, 51529, 138179, 805733, 471703, 409504, 530020, 472399, 363369, 707789, 486716, 226341, 172589, 747797, 520589, 2246, 410741, 493452, 892922, 42131, 192380, 530041, 537765, 888229, 263, 792351, 650911, 441501, 757035, 851387, 470125, 690889, 936988, 537029, 373744, 346492, 802721, 148366, 818659, 281937, 452552, 540871, 899229, 977351, 975408, 901475, 389903, 794396, 269389, 661238, 946331, 573794, 65819, 758267, 366144, 667649, 335929, 639530, 523997, 322405, 524071, 255764, 114614, 562351, 118607, 763621, 2905, 325301, 235129, 670689, 770993, 67918, 982603, 43325, 987744, 821477, 512184, 581821, 295500, 689773, 530659, 385645, 936907, 617506, 25771, 502955, 907670, 817783, 308543, 222863, 110198, 939508, 642079, 228805, 157051, 278612, 573623, 131111, 949300, 706337, 195747, 182687, 354341, 755423, 394819, 613811, 999667, 321802, 425662, 730669, 811306, 669901, 178737, 79445, 967831, 648523, 3011, 586709, 42979, 213259, 412925, 728047, 442063, 437467, 962601, 532037, 598729, 911900, 85829, 145551, 947469, 216829, 900974, 37987, 903882, 891017, 808934, 845895, 624601, 370164, 574219, 387982, 548900, 709271, 152960, 137437, 272814, 739669, 191533, 681096, 593183, 116467, 182141, 422091, 327685, 232633, 855543, 796447, 379108, 517446, 405253, 669180, 616589, 706888, 451660, 163147, 402337, 210131, 166343, 237689, 878207, 319302, 224299, 667373, 219809, 401256, 864820, 670147, 517722, 16319, 955940, 939812, 215239};
		String[] B = {};
		int[] C = { 26, 31, 81, 70, 191, 133, 266, 234, 205, 180, 85, 51, 303, 262, 149, 89, 264, 49, 128, 170, 189, 271, 84, 173, 216, 50, 295, 296, 138, 292, 8, 196, 250, 102, 158, 82, 66, 278, 187, 167, 233, 307, 171, 272, 196, 13, 90, 276, 314, 99, 127, 78, 18, 64, 154, 4, 278, 20, 106, 194, 39, 138, 315, 272, 191, 258, 132, 142, 255, 126, 43, 37, 181, 51, 180, 177, 80, 220, 271, 139, 210, 255, 236, 243, 318, 292, 18, 58, 99, 137, 155, 74, 76, 41, 204, 302, 78, 173, 253, 123 };
		int[] D = { 309, 565985, 105, 821397, 245, 313, 283, 299, 210, 276, 154, 216, 307, 310, 259, 457754, 33334, 772891, 227, 261, 549798, 273304, 12498, 193, 229, 77, 320, 304, 202901, 416950, 229, 301, 453827, 956043, 184, 230, 117, 279, 565101, 634995, 325579, 532291, 799052, 287, 193513, 280, 966190, 282, 198988, 217, 372261, 107206, 199, 436874, 278, 48, 290, 723619, 211389, 242, 191, 204, 413174, 217463, 293, 318, 232, 610538, 614031, 317, 372232, 785405, 519219, 539863, 894978, 204, 984858, 469912, 505237, 226, 232, 563292, 279, 844823, 320, 298, 247, 96, 105, 227, 552529, 297279, 215, 522326, 208, 320, 242, 182, 711851, 320 };
		System.out.println(Arrays.toString(obj.solve(A, B, C, D)));
	}

}